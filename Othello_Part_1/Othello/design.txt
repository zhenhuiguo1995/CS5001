Data structure:
nested list: stores the tile object as rows and columns
tuple: a two element tuple(x, y), which represents the position of a Tile object
set: contains the tuples of Tiles which is already on the board

Classes and methods
class Tile:
    """representing a single Tile object"""
    attributes:
        x, y coordinates of a tile
        radians of the tile
        color of the tile: either black or white
    methods:
        display():
            # display the tile as its color indicates

class Tiles:
    """representing an aggregation of Tiles"""
    attributes:
        length: the length of the square Board
        space: the width/length of each small square
        tiles: a nested list of Tile objects in each row and column
    methods:
        display():
            # calls every Tile object's display methods


class Board():
    """representing the board where players player the game"""
    attributes:
        length: the length of the square board
        space: the width/length of each small square
        tiles: a nested list of Tile objects
    methods:
        is_legal:
            # decides if a move by a player is legal or not
        add_tile:
            # adds a tile to tiles if a move is legal
        display:
            # display the background and lines of the board
        position_left:
            # returns the number of positions left on the board
        sum_of_black:
            # returns the sum of black Tiles currently on the board.
        sum_of_white:
            # returns the sum of white Tiles currently on the board.

class Player():
    """representing a player object"""
    attributes:
        name: the name of the player
        board: a board object on which the player players
        color: the color of the Tile that this player plays
    methods:
        move:
            # places the tile on board if legal



class game_control_center():
    """Maintains the state of the game"""
    attributes:
        first_player: the frist player object
        second_player: the second player object
        board: the board object on which the game is played
        take_turns: a boolean value representing which player's turn it is
    methods:
        update():
            # carries out necessary actions if one player wins
            # reports the grades
        turn():
            # judges which player should play this turn
            # and make a move for that player upon receiving mouse click


# Testing
if mouse pressed a position beyond the board: -> error